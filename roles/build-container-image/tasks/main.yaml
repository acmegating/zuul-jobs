# This can be removed if we add this functionality to Zuul directly
- name: Load information from zuul_return
  when: buildset_registry is not defined
  set_fact:
    buildset_registry: "{{ (lookup('file', zuul.executor.work_root + '/results.json') | from_json)['buildset_registry'] }}"
  ignore_errors: true

- name: Set container filename arg
  set_fact:
    containerfile: "{{ item.container_filename|default(container_filename|default('')) }}"

- name: Build container images
  include_tasks: build.yaml
  loop: "{{ container_images }}"

# Docker, and therefore skopeo and podman, don't understand docker
# push [1234:5678::]:5000/image/path:tag so we set up /etc/hosts with
# a registry alias name to support ipv6 and 4.
- name: Configure /etc/hosts for buildset_registry to workaround not understanding ipv6 addresses
  become: yes
  lineinfile:
    path: /etc/hosts
    state: present
    regex: "^{{ buildset_registry.host }}\tzuul-jobs.buildset-registry$"
    line: "{{ buildset_registry.host }}\tzuul-jobs.buildset-registry"
    insertafter: EOF
  when: buildset_registry is defined and buildset_registry.host | ipaddr
- name: Set buildset_registry alias variable when using ip
  set_fact:
    buildset_registry_alias: zuul-jobs.buildset-registry
  when: buildset_registry is defined and buildset_registry.host | ipaddr
- name: Set buildset_registry alias variable when using name
  set_fact:
    buildset_registry_alias: "{{ buildset_registry.host }}"
  when: buildset_registry is defined and not ( buildset_registry.host | ipaddr )
# Push each image.
- name: Push image to buildset registry
  when: buildset_registry is defined
  include_tasks: push.yaml
  loop: "{{ container_images }}"
  loop_control:
    loop_var: image
